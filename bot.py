import logging
import sqlite3
import json
from datetime import datetime, timedelta
from random import randint, choice
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext

# ---------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------------
TOKEN = "YOUR_BOT_TOKEN"  # üîπ –í—Å—Ç–∞–≤ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω
DB_FILE = "dragon_game.db"

# ---------------- –õ–æ–≥–∏ ----------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------------- –ë–∞–∑–∞ ----------------
def init_db():
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS players (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        gold INTEGER DEFAULT 100,
        inventory TEXT DEFAULT '{}',
        xp INTEGER DEFAULT 0,
        level INTEGER DEFAULT 1,
        last_daily TEXT,
        dragon_state TEXT DEFAULT '{}'
    )
    """)
    conn.commit()
    conn.close()

def get_player(user_id, username):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("SELECT * FROM players WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    if not row:
        cur.execute(
            "INSERT INTO players (user_id, username, inventory, dragon_state) VALUES (?, ?, ?, ?)",
            (user_id, username, json.dumps({}, ensure_ascii=False), json.dumps({}, ensure_ascii=False))
        )
        conn.commit()
        cur.execute("SELECT * FROM players WHERE user_id = ?", (user_id,))
        row = cur.fetchone()
    conn.close()
    return row

def update_player(user_id, **kwargs):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    for k, v in kwargs.items():
        cur.execute(f"UPDATE players SET {k} = ? WHERE user_id = ?", (v, user_id))
    conn.commit()
    conn.close()

# ---------------- –õ–æ–≥—ñ–∫–∞ ----------------
def load_dragon_state(player):
    try:
        return json.loads(player[7])
    except:
        return {}

def save_dragon_state(user_id, state):
    update_player(user_id, dragon_state=json.dumps(state, ensure_ascii=False))

def check_level_up(user_id, xp, level):
    needed_xp = level * 100
    if xp >= needed_xp:
        new_level = level + 1
        update_player(user_id, level=new_level, xp=xp - needed_xp)
        return True, new_level
    return False, level

# ---------------- –ö–æ–º–∞–Ω–¥–∏ ----------------
async def start(update: Update, context: CallbackContext):
    user = update.effective_user
    get_player(user.id, user.username or user.full_name)
    await update.message.reply_text(
        "üêâ –í—ñ—Ç–∞—é —É –≥—Ä—ñ –∑ –¥—Ä–∞–∫–æ–Ω–æ–º!\n\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/feed ‚Äî –Ω–∞–≥–æ–¥—É–≤–∞—Ç–∏ –¥—Ä–∞–∫–æ–Ω–∞\n"
        "/daily ‚Äî –æ—Ç—Ä–∏–º–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å\n"
        "/adventure ‚Äî –≤–∏—Ä—É—à–∏—Ç–∏ –≤ –ø—Ä–∏–≥–æ–¥—É"
    )

async def feed_dragon(update: Update, context: CallbackContext):
    user = update.effective_user
    player = get_player(user.id, user.username or user.full_name)
    dragon = load_dragon_state(player)

    now = datetime.utcnow().isoformat()
    dragon["last_fed"] = now
    xp = player[4] + 20
    leveled, new_level = check_level_up(user.id, xp, player[5])
    update_player(user.id, xp=xp)
    save_dragon_state(user.id, dragon)

    text = "üçè –¢–≤—ñ–π –¥—Ä–∞–∫–æ–Ω —Å–∏—Ç–∏–π!"
    if leveled:
        text += f"\nüéâ –†—ñ–≤–µ–Ω—å –ø—ñ–¥–≤–∏—â–µ–Ω–æ –¥–æ {new_level}!"
    await update.message.reply_text(text)

async def daily(update: Update, context: CallbackContext):
    user = update.effective_user
    player = get_player(user.id, user.username or user.full_name)
    last_daily = player[6]
    now = datetime.utcnow()

    if last_daily:
        last_daily_dt = datetime.fromisoformat(last_daily)
        if now - last_daily_dt < timedelta(days=1):
            await update.message.reply_text("‚è≥ –¢–∏ –≤–∂–µ –æ—Ç—Ä–∏–º—É–≤–∞–≤ –±–æ–Ω—É—Å —Å—å–æ–≥–æ–¥–Ω—ñ. –ü–æ–≤–µ—Ä—Ç–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞!")
            return

    gold_bonus = randint(50, 100)
    xp_bonus = randint(10, 30)
    update_player(user.id, gold=player[2] + gold_bonus, xp=player[4] + xp_bonus, last_daily=now.isoformat())

    await update.message.reply_text(f"üéÅ –©–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å!\n+üí∞ {gold_bonus} –∑–æ–ª–æ—Ç–∞\n+‚≠ê {xp_bonus} XP")

async def adventure(update: Update, context: CallbackContext):
    user = update.effective_user
    player = get_player(user.id, user.username or user.full_name)

    events = [
        ("–¢–∏ –∑–Ω–∞–π—à–æ–≤ —Å–∫–∞—Ä–±! üíé", lambda: (randint(50, 150), randint(20, 40))),
        ("–¢–∏ –ø–µ—Ä–µ–º—ñ–≥ –º–æ–Ω—Å—Ç—Ä–∞! üê≤", lambda: (randint(30, 80), randint(40, 60))),
        ("–¢–∏ –ø–æ—Ç—Ä–∞–ø–∏–≤ —É –ø–∞—Å—Ç–∫—É üò¢", lambda: (-randint(10, 30), randint(5, 15))),
        ("–î—Ä–∞–∫–æ–Ω –∑–Ω–∞–π—à–æ–≤ —ó–∂—É üçñ", lambda: (randint(20, 50), randint(10, 20))),
    ]

    event_text, reward_func = choice(events)
    gold_change, xp_gain = reward_func()

    new_gold = max(0, player[2] + gold_change)
    new_xp = player[4] + xp_gain
    leveled, new_level = check_level_up(user.id, new_xp, player[5])

    update_player(user.id, gold=new_gold, xp=new_xp)

    text = f"üó∫ –ü—Ä–∏–≥–æ–¥–∞: {event_text}\n"
    text += f"{'+' if gold_change >= 0 else ''}{gold_change} üí∞ –∑–æ–ª–æ—Ç–∞\n"
    text += f"+{xp_gain} ‚≠ê XP"
    if leveled:
        text += f"\nüéâ –†—ñ–≤–µ–Ω—å –ø—ñ–¥–≤–∏—â–µ–Ω–æ –¥–æ {new_level}!"

    await update.message.reply_text(text)

# ---------------- –ó–∞–ø—É—Å–∫ ----------------
def main():
    init_db()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("feed", feed_dragon))
    app.add_handler(CommandHandler("daily", daily))
    app.add_handler(CommandHandler("adventure", adventure))

    app.run_polling()

if __name__ == "__main__":
    main()
